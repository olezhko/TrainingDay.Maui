<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewModels="clr-namespace:TrainingDay.Maui.ViewModels"
             xmlns:controls="clr-namespace:TrainingDay.Maui.Controls"
             xmlns:resx="clr-namespace:TrainingDay.Maui.Resources.Strings"
             xmlns:syncfusion="clr-namespace:Syncfusion.Maui.Toolkit.Picker;assembly=Syncfusion.Maui.Toolkit"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:data="clr-namespace:TrainingDay.Common.Models;assembly=TrainingDay.Common" xmlns:models="clr-namespace:TrainingDay.Maui.Models"
             x:Class="TrainingDay.Maui.Controls.ExerciseView"
             x:Name="View">
    <Grid x:Name="MainGrid" RowSpacing="3" x:DataType="viewModels:TrainingExerciseViewModel">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Label Grid.Row="0" x:Name="NameLabel" FontSize="Large" HorizontalTextAlignment="Center" Text="{Binding Name}" 
               VerticalOptions="Start" />

        <Border Grid.Row="1" Padding="5" BackgroundColor="White" HorizontalOptions="Center" VerticalOptions="Center" Stroke="Transparent">
            <controls:ImageCache x:Name="ImageControl" HeightRequest="100" CodeNum="{Binding CodeNum}" WidthRequest="100">
                <controls:ImageCache.GestureRecognizers>
                    <TapGestureRecognizer Tapped="ImageTapped" />
                </controls:ImageCache.GestureRecognizers>
            </controls:ImageCache>
        </Border>

        <StackLayout Grid.Row="2" Spacing="0" Margin="5,0">
            <StackLayout Padding="0" IsVisible="{Binding Tags, Converter={StaticResource ExerciseTagExistsConverter}, ConverterParameter={x:Static data:ExerciseTags.ExerciseByReps}}"
                         Orientation="Vertical">
                <StackLayout Orientation="Horizontal" VerticalOptions="Start" Spacing="10">
                    <Label FontAttributes="Bold" FontSize="Medium" HorizontalOptions="Start" Text="{x:Static resx:AppResources.RepsString}" VerticalTextAlignment="Center" />

                    <ImageButton WidthRequest="40" HeightRequest="40" Padding="0" Source="add_empty" Clicked="AddWeightAndRepsItem_Clicked" BackgroundColor="Transparent">
                        <ImageButton.Behaviors>
                            <toolkit:IconTintColorBehavior TintColor="{AppThemeBinding Light={StaticResource PrimaryDarkColor}, Dark=White}" />
                        </ImageButton.Behaviors>
                    </ImageButton>
                </StackLayout>

                <FlexLayout AlignContent="Start" AlignItems="Center" BindableLayout.ItemsSource="{Binding WeightAndRepsItems}"
                        Direction="Row" JustifyContent="Start" VerticalOptions="Start" Wrap="Wrap">
                    <BindableLayout.ItemTemplate>
                        <DataTemplate x:DataType="viewModels:WeightAndRepsViewModel">
                            <controls:RepsAndWeightControl Margin="0" IsOnlyReps="True" Padding="0"
                                    DeleteRequestCommand="{Binding Source={x:Reference View}, Path=DeleteRequestCommand}"
                                    HorizontalOptions="Start" VerticalOptions="Start" Value="{Binding}" 
                                    WidthRequest="{Binding Source={RelativeSource AncestorType={x:Type FlexLayout}}, Path=Width, Converter={StaticResource HalfValueConverter}, ConverterParameter=3}"/>
                        </DataTemplate>
                    </BindableLayout.ItemTemplate>
                </FlexLayout>
            </StackLayout>

            <StackLayout Padding="0" Margin="0"
                         IsVisible="{Binding Tags, Converter={StaticResource ExerciseTagExistsConverter}, ConverterParameter={x:Static data:ExerciseTags.ExerciseByRepsAndWeight}}"
            Orientation="Vertical">
                <StackLayout Orientation="Horizontal" VerticalOptions="Start" Spacing="10">
                    <Label FontAttributes="Bold" FontSize="Medium" HorizontalOptions="Start" Text="{x:Static resx:AppResources.RepsAndWeightString}" VerticalTextAlignment="Center" />
                    <ImageButton WidthRequest="40" HeightRequest="40" Padding="0" Source="add_empty" Clicked="AddWeightAndRepsItem_Clicked" BackgroundColor="Transparent">
                        <ImageButton.Behaviors>
                            <toolkit:IconTintColorBehavior TintColor="{AppThemeBinding Light={StaticResource PrimaryDarkColor}, Dark=White}" />
                        </ImageButton.Behaviors>
                    </ImageButton>
                </StackLayout>

                <FlexLayout AlignContent="Start" AlignItems="Center" BindableLayout.ItemsSource="{Binding WeightAndRepsItems}"
                        Direction="Row" JustifyContent="Start" VerticalOptions="Start" Wrap="Wrap">
                    <BindableLayout.ItemTemplate>
                        <DataTemplate x:DataType="viewModels:WeightAndRepsViewModel">
                            <controls:RepsAndWeightControl Margin="0"
                                Padding="0"
                                DeleteRequestCommand="{Binding Source={x:Reference View}, Path=DeleteRequestCommand}"
                                HorizontalOptions="Start"
                                VerticalOptions="Start"
                                WidthRequest="{Binding Source={RelativeSource AncestorType={x:Type FlexLayout}}, Path=Width, Converter={StaticResource HalfValueConverter}, ConverterParameter=2}"
                                Value="{Binding}" />
                        </DataTemplate>
                    </BindableLayout.ItemTemplate>
                </FlexLayout>
            </StackLayout>

            <Border Style="{StaticResource MaterialBorder}" IsVisible="{Binding Tags, Converter={StaticResource ExerciseTagExistsConverter}, ConverterParameter={x:Static data:ExerciseTags.ExerciseByTime}}">
                <Grid>
                    <Label Text="{x:Static resx:AppResources.TimeString}" Style="{StaticResource MaterialLabel}" controls:MaterialLabelAttached.MaterialControlType="None"/>
                    <syncfusion:SfTimePicker SelectedTime="{Binding Time, Mode=TwoWay}" Format="HH_mm_ss" Grid.Row="1" HeightRequest="120" BackgroundColor="Transparent" 
                        HorizontalOptions="Center">
                            <syncfusion:SfTimePicker.ColumnHeaderTemplate>
                                <DataTemplate>
                                    <Grid BackgroundColor="Transparent" ColumnDefinitions="*,*,*">
                                        <Label Text="{x:Static resx:AppResources.Hours}" Grid.Column="0" HorizontalTextAlignment="Center" VerticalTextAlignment="Center"/>
                                        <Label Text="{x:Static resx:AppResources.Minutes}" Grid.Column="1" HorizontalTextAlignment="Center" VerticalTextAlignment="Center"/>
                                        <Label Text="{x:Static resx:AppResources.Seconds}" Grid.Column="2" HorizontalTextAlignment="Center" VerticalTextAlignment="Center"/>
                                    </Grid>
                                </DataTemplate>
                            </syncfusion:SfTimePicker.ColumnHeaderTemplate>
                            <syncfusion:SfTimePicker.ColumnHeaderView>
                                <syncfusion:TimePickerColumnHeaderView DividerColor="Transparent" />
                            </syncfusion:SfTimePicker.ColumnHeaderView>
                            <syncfusion:SfTimePicker.SelectedTextStyle>
                                <syncfusion:PickerTextStyle TextColor="White"/>
                            </syncfusion:SfTimePicker.SelectedTextStyle> 
                    </syncfusion:SfTimePicker>
                </Grid>
            </Border>
        </StackLayout>

        <FlexLayout Grid.Row="3" BindableLayout.ItemsSource="{Binding Muscles}" HorizontalOptions="Center" Wrap="Wrap" VerticalOptions="Center" Direction="Row"
            JustifyContent="Center" AlignItems="Center" AlignContent="Start">
            <BindableLayout.ItemTemplate>
                <DataTemplate x:DataType="viewModels:MuscleViewModel">
                    <Border Margin="1" Style="{StaticResource MuscleBorderCellStyle}">
                        <Label FontSize="14" Text="{Binding Name}" TextColor="White" LineBreakMode="TailTruncation" />
                    </Border>
                </DataTemplate>
            </BindableLayout.ItemTemplate>
        </FlexLayout>

		<Border Grid.Row="4" Margin="0" Padding="0" Style="{StaticResource BorderCellStyle}" VerticalOptions="Fill" IsVisible="True">
            <StackLayout>
                <StackLayout Margin="5">
                    <Label FontSize="Medium" HorizontalTextAlignment="Center" Text="{x:Static resx:AppResources.StartPosition}" TextColor="DodgerBlue" VerticalTextAlignment="Center" 
                           IsVisible="{Binding Description.StartPosition, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>
                    <Label FontSize="Small" Text="{Binding Description.StartPosition}" 
                           IsVisible="{Binding Description.StartPosition, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>

                    <Label FontSize="Medium" HorizontalTextAlignment="Center" Text="{x:Static resx:AppResources.Execution}" TextColor="LimeGreen" VerticalTextAlignment="Center" 
                           IsVisible="{Binding Description.Execution, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>
                    <Label FontSize="Small" Text="{Binding Description.Execution}" 
                           IsVisible="{Binding Description.Execution, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>

                    <Label FontSize="Medium" HorizontalTextAlignment="Center" Text="{x:Static resx:AppResources.Advice}" TextColor="Orange" VerticalTextAlignment="Center" 
                           IsVisible="{Binding Description.Advice, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>

                    <Label FontSize="Small" Text="{Binding Description.Advice}" 
                           IsVisible="{Binding Description.Advice, Converter={StaticResource IsEmptyStringConverter},ConverterParameter='inverse'}"/>
                </StackLayout>

                <CollectionView ItemsSource="{Binding VideoItems}">
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="models:ExerciseVideo">
                            <controls:FullScreenVideoWebView HorizontalOptions="Fill" Source="{Binding WebViewData}" VerticalOptions="Fill" />
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>
            </StackLayout>
        </Border>
    </Grid>
</ContentView>
